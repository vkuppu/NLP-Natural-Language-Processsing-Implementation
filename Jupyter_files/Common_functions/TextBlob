{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#TextBlob is a Python (2 and 3) library for processing textual data. \n",
    "#It provides a simple API for diving into common natural language processing (NLP) tasks such as part-of-speech tagging,\n",
    "# noun phrase extraction, sentiment analysis, classification, translation, and more."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "In IN\n",
      "the DT\n",
      "Data NNP\n",
      "Science NNP\n",
      "group NN\n",
      "we PRP\n",
      "are VBP\n",
      "building VBG\n",
      "the DT\n",
      "capability NN\n",
      "to TO\n",
      "ensure VB\n",
      "that DT\n",
      "information NN\n",
      "derived VBD\n",
      "from IN\n",
      "data NN\n",
      "is VBZ\n",
      "as RB\n",
      "reliable JJ\n",
      "as IN\n",
      "possible JJ\n",
      "and CC\n",
      "the DT\n",
      "quality NN\n",
      "of IN\n",
      "that DT\n",
      "information NN\n",
      "is VBZ\n",
      "quantified VBN\n",
      "We PRP\n",
      "are VBP\n",
      "developing VBG\n",
      "techniques NNS\n",
      "for IN\n",
      "optimisation NN\n",
      "and CC\n",
      "sampling VBG\n",
      "to TO\n",
      "enable VB\n",
      "reliable JJ\n",
      "inference NN\n",
      "under IN\n",
      "uncertainty NN\n",
      "particularly RB\n",
      "in IN\n",
      "the DT\n",
      "context NN\n",
      "of IN\n",
      "large-scale JJ\n",
      "problems NNS\n",
      "We PRP\n",
      "are VBP\n",
      "extending VBG\n",
      "our PRP$\n",
      "work NN\n",
      "in IN\n",
      "measurement JJ\n",
      "uncertainty NN\n",
      "evaluation NN\n",
      "to TO\n",
      "cover VB\n",
      "new JJ\n",
      "methods NNS\n",
      "of IN\n",
      "data NNS\n",
      "analytics NNS\n",
      "such JJ\n",
      "as IN\n",
      "machine-learning NN\n",
      "and CC\n",
      "classification NN\n",
      "tasks NNS\n",
      "We PRP\n",
      "are VBP\n",
      "building VBG\n",
      "on IN\n",
      "our PRP$\n",
      "work NN\n",
      "in IN\n",
      "software NN\n",
      "testing VBG\n",
      "to TO\n",
      "ensure VB\n",
      "that IN\n",
      "the DT\n",
      "algorithms NN\n",
      "and CC\n",
      "software NN\n",
      "used VBN\n",
      "to TO\n",
      "process VB\n",
      "data NNS\n",
      "can MD\n",
      "be VB\n",
      "demonstrated VBN\n",
      "as IN\n",
      "trustworthy NN\n",
      "Our PRP$\n",
      "capability NN\n",
      "in IN\n",
      "these DT\n",
      "areas NNS\n",
      "will MD\n",
      "be VB\n",
      "applied VBN\n",
      "across IN\n",
      "various JJ\n",
      "sectors NNS\n",
      "to TO\n",
      "provide VB\n",
      "case NN\n",
      "studies NNS\n",
      "demonstrators NNS\n",
      "and CC\n",
      "facilitate JJ\n",
      "external JJ\n",
      "uptake NN\n"
     ]
    }
   ],
   "source": [
    "from textblob import TextBlob\n",
    "\n",
    "text = '''\n",
    "In the Data Science group we are building the capability to ensure that information derived from data is as\n",
    "reliable as possible and the quality of that information is quantified. We are developing techniques for\n",
    "optimisation and sampling to enable reliable inference under uncertainty, particularly in the context of \n",
    "large-scale problems. We are extending our work in measurement uncertainty evaluation to cover new methods\n",
    "of data analytics, such as machine-learning and classification tasks. We are building on our work in \n",
    "software testing to ensure that the algorithms and software used to process data can be demonstrated as \n",
    "trustworthy. Our capability in these areas will be applied across various sectors to provide case studies, \n",
    "demonstrators and facilitate external uptake.\n",
    "\n",
    "'''\n",
    "blob = TextBlob(text)\n",
    "for word, pos in blob.tags:\n",
    "      print (word, pos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
